apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-profile
  annotations:
    kapp.k14s.io/update-strategy: fallback-on-replace
    ootb.apps.tanzu.vmware.com/servicebinding-workload: "true"
    kapp.k14s.io/change-rule: upsert after upserting servicebinding.io/ServiceBindings
  labels:
    app.kubernetes.io/part-of: customer-profile
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server
    app.kubernetes.io/component: run
    carto.run/workload-name: customer-profile
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: run
      app.kubernetes.io/part-of: customer-profile
      apps.tanzu.vmware.com/auto-configure-actuators: "true"
      apps.tanzu.vmware.com/has-tests: "true"
      apps.tanzu.vmware.com/workload-type: server
      carto.run/workload-name: customer-profile
      conventions.carto.run/framework: spring-boot
      services.conventions.carto.run/postgres: workload
      tanzu.app.live.view: "true"
      tanzu.app.live.view.application.actuator.path: actuator
      tanzu.app.live.view.application.actuator.port: "8081"
      tanzu.app.live.view.application.flavours: spring-boot
      tanzu.app.live.view.application.name: customer-profile
  template:
    metadata:
      annotations:
        apps.tanzu.vmware.com/correlationid: reg.perfect300rock.com/tapdev/lsp-source:workloads-customer-profile?sub_path=/
        autoscaling.knative.dev/minScale: "1"
        boot.spring.io/actuator: http://:8081/actuator
        boot.spring.io/version: 3.2.4
        conventions.carto.run/applied-conventions: |-
          spring-boot-convention/auto-configure-actuators-check
          spring-boot-convention/is-native-app-check
          spring-boot-convention/is-prometheus-enabled-check
          spring-boot-convention/spring-boot
          spring-boot-convention/spring-boot-graceful-shutdown
          spring-boot-convention/spring-boot-web
          spring-boot-convention/spring-boot-actuator
          spring-boot-convention/spring-boot-actuator-probes
          spring-boot-convention/app-live-view-appflavour-check
          spring-boot-convention/app-live-view-connector-boot
          spring-boot-convention/app-live-view-appflavours-boot
          spring-boot-convention/service-intent-postgres
        developer.conventions/target-containers: workload
        local-source-proxy.apps.tanzu.vmware.com: reg.perfect300rock.com/tapdev/lsp-source:workloads-customer-profile@sha256:54b413c394df136998f8200f0ccb42b1eadfdde365f12c4d51b4a3f3425a5f95
        services.conventions.carto.run/postgres: postgresql/42.6.2
      labels:
        app.kubernetes.io/component: run
        app.kubernetes.io/part-of: customer-profile
        apps.tanzu.vmware.com/auto-configure-actuators: "true"
        apps.tanzu.vmware.com/has-tests: "true"
        apps.tanzu.vmware.com/workload-type: server
        carto.run/workload-name: customer-profile
        conventions.carto.run/framework: spring-boot
        services.conventions.carto.run/postgres: workload
        tanzu.app.live.view: "true"
        tanzu.app.live.view.application.actuator.path: actuator
        tanzu.app.live.view.application.actuator.port: "8081"
        tanzu.app.live.view.application.flavours: spring-boot
        tanzu.app.live.view.application.name: customer-profile
    spec:
      containers:
      - env:
        - name: JAVA_TOOL_OPTIONS
          value: -Dmanagement.endpoint.health.probes.add-additional-paths="true" -Dmanagement.endpoint.health.show-details="always" -Dmanagement.endpoints.web.base-path="/actuator" -Dmanagement.endpoints.web.exposure.include="*" -Dmanagement.health.probes.enabled="true" -Dmanagement.server.port="8081" -Dserver.port="8080" -Dserver.shutdown.grace-period="24s"
        image: reg.perfect300rock.com/tapdev/supply-chain/customer-profile-workloads@sha256:4e09e397c6e20874b131aa6486d4982b5f4e06c5e388209e2edf91d4c8718553
        livenessProbe:
          httpGet:
            path: /livez
            port: 8080
            scheme: HTTP
        name: workload
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
        resources: {}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
        startupProbe:
          httpGet:
            path: /readyz
            port: 8080
            scheme: HTTP
      serviceAccountName: default
---
apiVersion: v1
kind: Service
metadata:
  name: customer-profile
  labels:
    app.kubernetes.io/part-of: customer-profile
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server
    app.kubernetes.io/component: run
    carto.run/workload-name: customer-profile
spec:
  selector:
    app.kubernetes.io/component: run
    app.kubernetes.io/part-of: customer-profile
    apps.tanzu.vmware.com/auto-configure-actuators: "true"
    apps.tanzu.vmware.com/has-tests: "true"
    apps.tanzu.vmware.com/workload-type: server
    carto.run/workload-name: customer-profile
    conventions.carto.run/framework: spring-boot
    services.conventions.carto.run/postgres: workload
    tanzu.app.live.view: "true"
    tanzu.app.live.view.application.actuator.path: actuator
    tanzu.app.live.view.application.actuator.port: "8081"
    tanzu.app.live.view.application.flavours: spring-boot
    tanzu.app.live.view.application.name: customer-profile
  ports:
  - targetPort: 8080
    port: 8080
    name: http

